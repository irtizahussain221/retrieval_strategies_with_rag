import numpy as np
from scipy import stats
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

ranks1 = np.array(
    [
        3,
        1,
        1,
        4,
        1,
        1,
        4,
        4,
        1,
        9,
        9,
        6,
        10,
        3,
        1,
        1,
        1,
        13,
        3,
        1,
        7,
        3,
        2,
        1,
        8,
        1,
        0,
        1,
        3,
        7,
        1,
        2,
        0,
        5,
        17,
        1,
        3,
        3,
        10,
        0,
        9,
        17,
        1,
        7,
        13,
        5,
        2,
        4,
        1,
        4,
    ]
)
ranks2 = np.array(
    [
        2,
        1,
        1,
        2,
        1,
        1,
        2,
        4,
        1,
        10,
        6,
        2,
        8,
        3,
        1,
        1,
        1,
        11,
        2,
        1,
        7,
        3,
        2,
        1,
        6,
        1,
        0,
        1,
        2,
        5,
        1,
        4,
        19,
        4,
        16,
        1,
        2,
        2,
        9,
        19,
        7,
        13,
        1,
        5,
        12,
        5,
        2,
        3,
        1,
        3,
    ]
)
rank3 = np.array(
    [
        1,
        1,
        1,
        3,
        1,
        1,
        5,
        4,
        1,
        3,
        6,
        1,
        2,
        2,
        1,
        1,
        1,
        5,
        2,
        1,
        5,
        2,
        1,
        1,
        2,
        1,
        0,
        1,
        1,
        3,
        1,
        4,
        6,
        6,
        2,
        1,
        1,
        3,
        3,
        6,
        3,
        6,
        1,
        8,
        6,
        5,
        1,
        1,
        2,
        3,
    ]
)

stat, p_value = stats.wilcoxon(ranks1.tolist(), ranks2.tolist())

print("t-statistic:", stat)
print("p-value:", p_value)

data = {
    'Dense Vector Search' : ranks1.tolist(),
    'Hybrid Vector Search': ranks2.tolist(),
    'Hybrid Vector Search with Query Expansion': rank3.tolist(),
}

df = pd.DataFrame(data, index=[f"Query {i}" for i in range(1, 51)])
plt.figure(figsize=(16, 8))
sns.heatmap(df, annot=False, cmap="YlGnBu", linewidths=0.5)
plt.title('Heat Map of Ranks for Different Retrieval Methods')
plt.xlabel('Retrieval Methods')
plt.ylabel('Queries')
plt.show()
